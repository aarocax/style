{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="http://code.jquery.com/ui/1.9.1/themes/base/jquery-ui.css">
{% endblock %}

{% block pageTitle %}
    <div class="row">
        <div class="col-md-12"><h2>Appointments</h2></div>
    </div>
    <hr />
{% endblock %}

{# personalizamos como se mostrará cada schedule #}
{% form_theme form _self %}

{% block _appbundle_appointment_schedules_entry_row %}
{% spaceless %}
    <div class="col-md-12 well schedule">
        <div class="row">
            <button type="button" id="appbundle_appointment_schedules___name___index" class="close" ><i class="fa fa-times" aria-hidden="true"></i></button>
        </div>
        <div id="message" class="row"></div>
        <div class="row">
            {{ form_widget(form.scheduleDate, { 'attr': {'value' : "now"|date("Y-m-d"), 'style' : 'display:none;' }} ) }}
            {{ form_widget(form.service) }} {# campo oculto que se rellena con el autocomplete#}
            {{ form_widget(form.staff) }} {# campo oculto que se rellena con el autocomplete#}
            {{ form_widget(form.room) }} {# campo oculto que se rellena con el autocomplete#}
            <div class="form-group col-md-3">
                {{ form_label(form.services) }}
                {{ form_widget(form.services) }} {# campo autocomplete#}
                {{ form_errors(form.service) }}
            </div>
            <div class="form-group col-md-3">
                {{ form_label(form.staffs) }}
                {{ form_widget(form.staffs) }} {# campo autocomplete#}
                {{ form_errors(form.staff) }}
            </div>
            <div class="form-group col-md-3">
                {{ form_label(form.rooms) }}
                {{ form_widget(form.rooms) }} {# campo autocomplete#}
                {{ form_errors(form.room) }}
            </div>
            <div class="form-group col-md-3">
                <div class="form-group col-md-6">
                    {{ form_label(form.startingHour) }}    
                    {{ form_widget(form.startingHour) }}
                    {{ form_errors(form.startingHour) }}
                </div>
                <div class="form-group col-md-6">
                    {{ form_label(form.finishHour) }}
                    {{ form_widget(form.finishHour) }}
                    {{ form_errors(form.finishHour) }}
                </div>
            </div>
        </div>
        <div class="row">
            
            <div class="form-group col-md-3">
                {{ form_label(form.discount) }}
                {{ form_widget(form.discount) }}
                {{ form_errors(form.discount) }}
            </div>
            <div class="form-group col-md-3">
                {{ form_label(form.price) }}
                {{ form_widget(form.price) }}
                {{ form_errors(form.price) }}
            </div>
        </div>
        <div id="appbundle_appointment_schedules___name___precioInicial" style="display: none;"></div>
        <div id="appbundle_appointment_schedules___name___precioBeforeChange" style="display: none;"></div>
        <div id="appbundle_appointment_schedules___name___scheduleTime" style="display: none;"></div>
    </div>
{% endspaceless %}
{% endblock %}


{% block main %}
	<div class="row">
    <div class="col-md-12">
      <!-- Advanced Tables -->
      <div class="panel panel-default">
        <div class="panel-heading">
            New Appointment
        </div>
        <div class="panel-body">
          <div class="col-md-12">
          	<form action="{{ path('appointment_new') }}" method="post" {{ form_enctype(form) }}>
          		<div class="row">
                <div class="form-group col-md-6">
                    <label class="required">Customer</label>
                    <input type="text" data-id="appbundle_appointment_customer"  name="select_customer[customer]" data-url="{{ path('customer_get') }}" tabindex="0" class="form-control autocomplete" value="{{ form.vars.data.lastname|default('') }}">
                </div>
                <div class="form-group col-md-2">
                    {{ form_label(form.appointmentDate) }}
                    {{ form_widget(form.appointmentDate, { 'attr': {'tabindex' : 1, 'value': date|date('Y-m-d'), 'class':'form-control input-sm'  } }) }}
                    {{ form_errors(form.appointmentDate) }}
                </div>
                <div class="form-group col-md-2">
                  <label for="appbundle_appointment_appointmentDate" class="required">Time</label>
                  <br>
                  <span id="appointmentHour">{{ time|date('H:i:s') }}</span>
                </div>
                <div class="form-group col-md-2">
                  <label for="appointmentRoom" class="required">Sala</label>
                  <br>
                  <span id="appointmentRoom">{{ room }}</span>
                </div>
              </div>
              <div class="row">
                <div class="form-group col-md-2">
                    {{ form_label(form.debt) }}
                    {{ form_widget(form.debt, { 'attr': {'tabindex' : 2, 'class':'form-control input-sm'  } }) }}
                    {{ form_errors(form.debt) }}
                </div>
                <div class="form-group col-md-1">
                    {{ form_label(form.paid) }}
                    {{ form_widget(form.paid, { 'attr': {'tabindex' : 3, 'class':'form-control input-sm'}} ) }}
                    {{ form_errors(form.paid) }}
                </div>
              </div>    
              <div class="row">
                <br>
                <div class="boton-add"></div>
                <hr>
                {{ form_rest(form) }}
              </div>
              <div class="row">
                <div class="col-md-2">
                  <span for="totalPrice"><strong>Final Price:</strong> <span class="text-left" id="totalPrice" name="totalPrice">0</span><span> €</span></span>
                </div>
              </div>
              <hr>
            	<div class="row">
                <button type="submit" name="enviar" class="btn btn-success">Enviar</button>
                	{# {{ form_widget(form.submit, {'attr': {'class': 'btn btn-default'}}) }} #}
                <a href="{{ path('appointment') }}" class="btn btn-default">Back to the list</a>
              </div>
                  
          	</form>
          </div>
        </div>
      </div>
    </div>
  </div>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>

  <script>

    function initializeMainForm() {
      $('.autocomplete').each(function(i, el) {
          var $this = $(el);
          $this.autocomplete({
              source: $this.data('url'),
              minLength: 1,
              select: function( event, ui ) {
                  $('#' + $this.data('id')).val(ui.item.id);
                  event.preventDefault();
                  this.value = ui.item.label+ ' ' +ui.item.lastName;
              }
          });
          $this.autocomplete( "instance" )._renderItem = function( ul, item ) {
            return $( "<li>" )
              .append( "<a>" + item.label + " " + item.lastName + "</a>" )
              .appendTo( ul );
          };
      });
    }

    function initializeSchedulesForm() {

      // Get the div that holds the collection of addresses
      var collectionHolder = $('div.schedules');

      // setup an "add a schedule" link
      var $newLinkLi = $('<a href="#" id="botton-add" class="btn btn-xs btn-info add_schedule_link"><i class="glyphicon glyphicon-plus glyphicon-white"></i> Añadir un schedule</a>');

      // add the "add a schedule" anchor and li to the addresses div
      //collectionHolder.parent().append($newLinkLi);
      $(".boton-add").append($newLinkLi);

      // count the current form inputs we have (e.g. 2), use that as the new
      // index when inserting a new item (e.g. 2)
      collectionHolder.data('index', collectionHolder.find(':input').length);

      // Cuando pulsamos nuevo schedule
      $newLinkLi.on('click', function(e) {
        // add a new form (see next code block)
        addNewScheduleForm(collectionHolder);
        // Inicializa los campos autocomplete del nuevo schedule
        initializeAutocompleteFields(e);
        // cuando se ñade un servicio se deshabilita el botón de añadir más hasta que este no tiene un servicio
  //document.getElementById('botton-add').style.pointerEvents = 'none';
      });

      // Cuando eliminamos un formulario de schedule
      $(document).on('click', '.close', function(){
        $(this).closest('.schedule').fadeOut(0, function() {
            $(this).remove();
        });
      });
    }

    function addNewScheduleForm(collectionHolder) {
      
      
      // Get the data-prototype explained earlier
      var prototype = collectionHolder.data('prototype');
      // get the new index
      var index = collectionHolder.data('index');
      // Replace '__name__' in the prototype's HTML to
      // instead be a number based on how many items we have
      var newForm = prototype.replace(/__name__/g, index);
      // increase the index with one for the next item
      collectionHolder.data('index', index + 1);
      // Display the form in the page in an li, before the "Add a schedule" link li
      var $newFormLi = $('<div id="schedule_'+index+'_box"></div>').append(newForm);
      collectionHolder.append($newFormLi);
      // Pone la fecha del appointment en cada schedule
      var fecha = document.getElementById('appbundle_appointment_appointmentDate').value;
      document.getElementById('appbundle_appointment_schedules_'+index+'_scheduleDate').value = fecha;

      //ponemos descuento a 0
      document.getElementById('appbundle_appointment_schedules_'+index+'_discount').value = 0;

      //ponemos precio a 0
      document.getElementById('appbundle_appointment_schedules_'+index+'_price').value = 0;

      console.log('Este es el array índices: '+indices);
      indices.push(index);
      console.log('añado el índice '+index+' al array índices: '+indices);

      // cuando se actualiza un descuento
      $('#appbundle_appointment_schedules_'+index+'_discount').on('blur', function(id) { 
          var price = document.getElementById("appbundle_appointment_schedules_"+index+"_precioInicial").innerHTML;
          var discount = document.getElementById("appbundle_appointment_schedules_"+index+"_discount").value;
          discount = (discount / 100) * price;
          price = price - discount;
          price = Math.round(price * 100) / 100
          document.getElementById("appbundle_appointment_schedules_"+index+"_price").value = price;

          // actualizamos el precio total
          $('#appbundle_appointment_schedules_'+index+'_price').trigger("change");
      });

      // cuando cambia un precio
      $('#appbundle_appointment_schedules_'+index+'_price').change(function(){
          var precioBeforeChange = document.getElementById("appbundle_appointment_schedules_"+index+"_precioBeforeChange").innerHTML;
          precioBeforeChange = parseFloat(precioBeforeChange);
          var totalPrice = document.getElementById("totalPrice").innerHTML;
          var price = document.getElementById("appbundle_appointment_schedules_"+index+"_price").value;
          totalPrice = parseFloat(totalPrice);
          price = parseFloat(price);
          totalPrice = (totalPrice - precioBeforeChange) + price;
          document.getElementById("totalPrice").innerHTML = totalPrice;
          document.getElementById("appbundle_appointment_schedules_"+index+"_precioBeforeChange").innerHTML = price;
      });

      // cuando se elimina un elemento
      $('#appbundle_appointment_schedules_'+index+'_index').on('click', function(id) {
          console.log('se ha eliminado el schedule (index): '+index);
          console.log('se ha eliminado el schedule (id): '+id);
          //delete indices[index];
          //indices.removeItem(index);
          //$pos = indices.indexOf(parseInt(index));
          $pos = indices.indexOf(index);
          indices.splice($pos,1);
          console.log('índices despues de borrar: '+indices);
          // hay que restar al total el importe del servicio elimado
          var price = document.getElementById("appbundle_appointment_schedules_"+index+"_price").value;
          var totalPrice = document.getElementById("totalPrice").innerHTML;
          totalPrice = parseFloat(totalPrice);
          price = parseFloat(price);
          totalPrice = totalPrice - price;
          document.getElementById("totalPrice").innerHTML = totalPrice;
          console.log('recalcular tiempos actualizar todo');
          recalcularTiempos(index, indices);
      });

      // cuando cambia la hora de inicio
      $('#appbundle_appointment_schedules_'+index+'_startingHour').on('click', function(id) {
          console.log('ha cambiado la hora de inicio');
      });

      // cuando cambia la hora de fin
      $('#appbundle_appointment_schedules_'+index+'_finishHour').on('click', function(id) {
          console.log('ha cambiado la hora de fin');
      });

      // when room change
      $('#appbundle_appointment_schedules_'+index+'_rooms').on('blur', function(id) {
          console.log('ha cambiado la sala');
          var room = document.getElementById("appbundle_appointment_schedules_"+index+"_room").value;
          document.getElementById("appointmentRoom").innerHTML = room;
      });
    }

    function initializeAutocompleteFields(el) {
      // este recoge el autocomplete de service
      $('.autocompleteservice').each(function(i, el) {
          var $this = $(el);
          $this.autocomplete({
              source: $this.data('url'),
              minLength: 1,
              select: function( event, ui ) {

                  $('#' + $this.data('id')).val(ui.item.id);
                  var id = getIdLine($this.data('id'));
                  $hour = calculateHour(ui.item.time, id);
                  document.getElementById("appbundle_appointment_schedules_"+id+"_price").value = ui.item.price;
                  document.getElementById("appbundle_appointment_schedules_"+id+"_precioInicial").innerHTML = ui.item.price;
                  document.getElementById("appbundle_appointment_schedules_"+id+"_precioBeforeChange").innerHTML = 0;
                  document.getElementById("appbundle_appointment_schedules_"+id+"_scheduleTime").innerHTML = ui.item.time;
                  
                  // actualizamos el precio total
                  $('#appbundle_appointment_schedules_'+id+'_price').trigger("change");

                  // cuando se pone un servicio se habilita el botón para añadir más schedules
      //document.getElementById('botton-add').style.pointerEvents = 'auto';
              }
          });
      });

      // este recoge el autocomplete de rooms
      $('.autocompleteroom').each(function(i, el) {
          var $this = $(el);
          $this.autocomplete({
              source: $this.data('url'),
              minLength: 1,
              select: function( event, ui ) {
                  $('#' + $this.data('id')).val(ui.item.id);
              },
              create: function(event, ui){
                // inicializamos el campo
                var room = document.getElementById("appointmentRoom").innerHTML;
                $("#appbundle_appointment_schedules_"+i+"_room").val(room);
                $("#appbundle_appointment_schedules_"+i+"_rooms").val('sala '+room);
              }
          });
      });

      // este recoge el autocomplete de staff
      $('.autocompletestaff').each(function(i, el) {
        var $this = $(el);
        $this.autocomplete({
            source: $this.data('url'),
            minLength: 1,
            select: function( event, ui ) {
                $('#' + $this.data('id')).val(ui.item.id);
                event.preventDefault();
                this.value = ui.item.label+ ' ' +ui.item.lastName;
            },
            create: function(event, ui){
              $("#appbundle_appointment_schedules_"+i+"_staff").val('2');
              $("#appbundle_appointment_schedules_"+i+"_staffs").val('ana aroca');
            }
        });
        $this.autocomplete( "instance" )._renderItem = function( ul, item ) {
          return $( "<li>" )
            .append( "<a>" + item.label + " " + item.lastName + "</a>" )
            .appendTo( ul );
        };
      });
    }

    function getIdLine(str) {
      var id = str.substring(32,34);
      var stringLength = id.length;
      var lastChar = id.charAt(stringLength - 1);
      if (lastChar === '_') {
          id = id.substring(0, stringLength-1);
      }
      return id;
    }

    function calculateHour(time, id) {
        console.log('cuando calculo la hora: '+indices+' id: '+id);
        $position = indices.indexOf(parseInt(id));
        console.log('position: '+$position);
        console.log('valor de position: '+indices[$position-1]);
        if (id == 0) {
            //tomamos la fecha del schedule
            var scheduleDate = document.getElementById('appbundle_appointment_appointmentDate').value;
            //tomamos la hora del schedule
            var scheduleTime =  document.getElementById("appointmentHour").innerHTML;
        } else {
            ids = id - 1;
            ids = indices[$position-1];
            console.log(ids);
            //  ugdgids = indices - 1;
            var scheduleDate = document.getElementById("appbundle_appointment_schedules_"+ids+"_scheduleDate").value;
            var scheduleTime =  document.getElementById("appbundle_appointment_schedules_"+ids+"_finishHour").value;
        }
        

        // Creamos un objeto DateTime con la feha y hora del schedule
        var scheduleDateTime = new Date(scheduleDate+' '+scheduleTime);

        // Creamos un objeto DateTime con la feha y hora del schedule + tiempo del servicio
        var scheduleDateTimeService = new Date(scheduleDateTime.getTime() + time*60000);

        var formatTime = function(data) {
            if (data < 10) {data = '0'+data;}
            return data;
        }

        var startTimeHour = formatTime(scheduleDateTime.getHours());
        var startTimeMin  = formatTime(scheduleDateTime.getMinutes());
        var endTimeHour   = formatTime(scheduleDateTimeService.getHours());
        var endTimeMin    = formatTime(scheduleDateTimeService.getMinutes());

        var startTime = startTimeHour+':'+startTimeMin;
        var endTime   = endTimeHour+':'+endTimeMin;

        document.getElementById("appbundle_appointment_schedules_"+id+"_startingHour").value = startTime;
        document.getElementById("appbundle_appointment_schedules_"+id+"_finishHour").value = endTime;

        // verificar sihay otra cita a la misma hora en la misma sala
        //tomo el valor de la sala
        var room = document.getElementById("appbundle_appointment_schedules_"+id+"_room").value;
        // tomo la fecha
        //var date = document.getElementById("appbundle_appointment_schedules_"+id+"_scheduleDate").value;

        var datos = { st: startTime, et : endTime, room: room, scheduleDate: scheduleDate} 

        $.ajax({
          url: "http://localhost/style.local/web/app_dev.php/schedule/exist-schedule-startHour",
          type: 'GET',
          data: { st: startTime, et : endTime, room: room, scheduleDate: scheduleDate} ,
          context: document.body
        }).done(function( data ) {
            if (data.length == 0) {

            } else {
                $('#schedule_'+id+'_box .well').css("background-color","#C90000");
                $( '#schedule_'+id+'_box .well #message' ).append( "<span><h2>Esta hora cincide con ota cita</h2></span>" );
                $( '#schedule_'+id+'_box .well #message h2' ).css("color","#FFF");
            }

          
        });

        $.ajax({
          url: "http://localhost/style.local/web/app_dev.php/schedule/exist-schedule-finishHour",
          type: 'GET',
          data: { st: startTime, et : endTime, room: room, scheduleDate: scheduleDate} ,
          context: document.body
        }).done(function( data ) {
            if (data.length == 0) {

            } else {
                $('#schedule_'+id+'_box .well').css("background-color","#C90000");
                $( '#schedule_'+id+'_box .well #message' ).append( "<span><h2>Esta hora cincide con ota cita</h2></span>" );
                $( '#schedule_'+id+'_box .well #message h2' ).css("color","#FFF");
            }

          
        });
    }

    function recalcularTiempos(index, indices) {

      console.log('*********recalcular tiempos***************');
      console.log('index que borramos: '+index);
      console.log('array de schedules: '+indices);
      for (var i=0; i<indices.length; i++) {
        if (indices[i] > index) {
          console.log(index+' es menor que: '+indices[i]);
          // recalcular si todos están en la misma sala, no hace falta ver si hay hueco

          $time = document.getElementById("appbundle_appointment_schedules_"+indices[i]+"_scheduleTime").innerHTML;
          console.log('Time: '+$time);
          calculateHour($time, indices[i])
        };
      }
    };

    function AppLoad() {

      initializeMainForm();
      initializeSchedulesForm();

      //var elemento=document.getElementById('botton-add');
      //elemento.addEventListener('click', addRow, false);

      // hacemos el primer clik en añadir servicio
      document.getElementById('botton-add').click();
    }
    
    var indices = new Array();
    window.addEventListener('load', AppLoad, false);

  </script>
{% endblock %}
